From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Encode42 <me@encode42.dev>
Date: Tue, 1 Jun 2021 19:55:53 -0400
Subject: [PATCH] Tentacles config

This patch includes the configuration files for tentacles.yml and the tentacles command.

diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index de917e53fdbd4d8965237864db5fe8bf63cca61b..eaa5913684d4fe596dcbe0b754543849e7c74c0b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -221,6 +221,15 @@ public class DedicatedServer extends MinecraftServer implements IMinecraftServer
         }
         net.pl3x.purpur.PurpurConfig.registerCommands();
         // Purpur end
+        // Tentacles start
+        try {
+            net.pl3x.tentacles.TentaclesConfig.init((java.io.File) options.valueOf("tentacles-settings"));
+        } catch (Exception e) {
+            DedicatedServer.LOGGER.error("Unable to load server configuration", e);
+            return false;
+        }
+        net.pl3x.tentacles.TentaclesConfig.registerCommands();
+        // Tentacles end
         com.destroystokyo.paper.VersionHistoryManager.INSTANCE.getClass(); // load version history now
         io.papermc.paper.brigadier.PaperBrigadierProviderImpl.INSTANCE.getClass(); // init PaperBrigadierProvider
         // Paper end
diff --git a/src/main/java/net/minecraft/world/level/World.java b/src/main/java/net/minecraft/world/level/World.java
index cb58d2635650c20da21583ead18e9f380323205b..cc4246b8bf65b4bf44ab322777ce9f5237b85f09 100644
--- a/src/main/java/net/minecraft/world/level/World.java
+++ b/src/main/java/net/minecraft/world/level/World.java
@@ -157,6 +157,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
 
     public final com.tuinity.tuinity.config.TuinityConfig.WorldConfig tuinityConfig; // Tuinity - Server Config
     public final net.pl3x.purpur.PurpurWorldConfig purpurConfig; // Purpur
+    public final net.pl3x.tentacles.TentaclesWorldConfig tentaclesConfig; // Tentacles
 
     public final co.aikar.timings.WorldTimingsHandler timings; // Paper
     public static BlockPosition lastPhysicsProblem; // Spigot
@@ -299,6 +300,7 @@ public abstract class World implements GeneratorAccess, AutoCloseable {
         this.chunkPacketBlockController = this.paperConfig.antiXray ? new ChunkPacketBlockControllerAntiXray(this, executor) : ChunkPacketBlockController.NO_OPERATION_INSTANCE; // Paper - Anti-Xray
         this.tuinityConfig = new com.tuinity.tuinity.config.TuinityConfig.WorldConfig(((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName()); // Tuinity - Server Config
         this.purpurConfig = new net.pl3x.purpur.PurpurWorldConfig((((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName()), env); // Purpur
+        this.tentaclesConfig = new net.pl3x.tentacles.TentaclesWorldConfig((((net.minecraft.world.level.storage.WorldDataServer)worlddatamutable).getName())); // Tentacles
         this.playerBreedingCooldowns = this.getNewBreedingCooldownCache(); // Purpur
         this.generator = gen;
         this.world = new CraftWorld((WorldServer) this, gen, env);
diff --git a/src/main/java/net/pl3x/tentacles/TentaclesConfig.java b/src/main/java/net/pl3x/tentacles/TentaclesConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..f910f3b5875559d8fc8c0f377f624b9be179d34e
--- /dev/null
+++ b/src/main/java/net/pl3x/tentacles/TentaclesConfig.java
@@ -0,0 +1,130 @@
+package net.pl3x.tentacles;
+
+import com.google.common.base.Throwables;
+import net.minecraft.server.MinecraftServer;
+import net.pl3x.tentacles.command.TentaclesCommand;
+import org.bukkit.Bukkit;
+import org.bukkit.command.Command;
+import org.bukkit.configuration.InvalidConfigurationException;
+import org.bukkit.configuration.file.YamlConfiguration;
+
+import java.io.File;
+import java.io.IOException;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.logging.Level;
+
+public class TentaclesConfig {
+	private static final String HEADER = "This is the main configuration file for Tentacles.\n"
+			+ "As you can see, there's tons to configure. Some options may impact gameplay, so use\n"
+			+ "with caution, and make sure you know what each option does before configuring.\n"
+			+ "\n"
+			+ "If you need help with the configuration or have any questions related to Tentacles,\n"
+			+ "join us in our Discord guild.\n"
+			+ "\n"
+			+ "Website: https://github.com/pl3xgaming/Tentacles \n"
+			+ "Wiki: https://github.com/pl3xgaming/Tentacles/wiki \n";
+	private static File CONFIG_FILE;
+	public static YamlConfiguration config;
+
+	private static Map<String, Command> commands;
+
+	static int version;
+	static boolean verbose;
+
+	public static void init(File configFile) {
+		CONFIG_FILE = configFile;
+		config = new YamlConfiguration();
+		try {
+			config.load(CONFIG_FILE);
+		} catch (IOException ignore) {
+		} catch (InvalidConfigurationException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not load tentacles.yml, please correct your syntax errors", ex);
+			throw Throwables.propagate(ex);
+		}
+		config.options().header(HEADER);
+		config.options().copyDefaults(true);
+		verbose = getBoolean("verbose", false);
+
+		commands = new HashMap<>();
+		commands.put("tentacles", new TentaclesCommand("tentacles"));
+
+		version = getInt("config-version", 1);
+		set("config-version", 1);
+
+		readConfig(TentaclesConfig.class, null);
+	}
+
+	protected static void log(String s) {
+		if (verbose) {
+			log(Level.INFO, s);
+		}
+	}
+
+	protected static void log(Level level, String s) {
+		Bukkit.getLogger().log(level, s);
+	}
+
+	public static void registerCommands() {
+		for (Map.Entry<String, Command> entry : commands.entrySet()) {
+			MinecraftServer.getServer().server.getCommandMap().register(entry.getKey(), "Tentacles", entry.getValue());
+		}
+	}
+
+	static void readConfig(Class<?> clazz, Object instance) {
+		for (Method method : clazz.getDeclaredMethods()) {
+			if (Modifier.isPrivate(method.getModifiers())) {
+				if (method.getParameterTypes().length == 0 && method.getReturnType() == Void.TYPE) {
+					try {
+						method.setAccessible(true);
+						method.invoke(instance);
+					} catch (InvocationTargetException ex) {
+						throw Throwables.propagate(ex.getCause());
+					} catch (Exception ex) {
+						Bukkit.getLogger().log(Level.SEVERE, "Error invoking " + method, ex);
+					}
+				}
+			}
+		}
+
+		try {
+			config.save(CONFIG_FILE);
+		} catch (IOException ex) {
+			Bukkit.getLogger().log(Level.SEVERE, "Could not save " + CONFIG_FILE, ex);
+		}
+	}
+
+	private static void set(String path, Object val) {
+		config.addDefault(path, val);
+		config.set(path, val);
+	}
+
+	private static boolean getBoolean(String path, boolean def) {
+		config.addDefault(path, def);
+		return config.getBoolean(path, config.getBoolean(path));
+	}
+
+	private static double getDouble(String path, double def) {
+		config.addDefault(path, def);
+		return config.getDouble(path, config.getDouble(path));
+	}
+
+	private static int getInt(String path, int def) {
+		config.addDefault(path, def);
+		return config.getInt(path, config.getInt(path));
+	}
+
+	private static <T> List getList(String path, T def) {
+		config.addDefault(path, def);
+		return config.getList(path, config.getList(path));
+	}
+
+	private static String getString(String path, String def) {
+		config.addDefault(path, def);
+		return config.getString(path, config.getString(path));
+	}
+}
diff --git a/src/main/java/net/pl3x/tentacles/TentaclesVersionFetcher.java b/src/main/java/net/pl3x/tentacles/TentaclesVersionFetcher.java
new file mode 100644
index 0000000000000000000000000000000000000000..fbbd6367d2769702d37a1e2d5e0c8907ad50a866
--- /dev/null
+++ b/src/main/java/net/pl3x/tentacles/TentaclesVersionFetcher.java
@@ -0,0 +1,119 @@
+package net.pl3x.tentacles;
+
+import com.destroystokyo.paper.VersionHistoryManager;
+import com.destroystokyo.paper.util.VersionFetcher;
+import com.google.common.base.Charsets;
+import com.google.common.io.Resources;
+import com.google.gson.Gson;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonSyntaxException;
+import net.kyori.adventure.text.Component;
+import net.kyori.adventure.text.TextComponent;
+import net.kyori.adventure.text.format.NamedTextColor;
+import net.kyori.adventure.text.format.TextDecoration;
+
+import javax.annotation.Nonnull;
+import javax.annotation.Nullable;
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.net.HttpURLConnection;
+import java.net.URL;
+
+public class TentaclesVersionFetcher implements VersionFetcher {
+    private static final String JENKINS_URL = "https://ci.pl3x.net/job/Tentacles/lastSuccessfulBuild/buildNumber";
+    private static final String GITHUB_BRANCH_NAME = "ver/1.16.5";
+
+    @Override
+    public long getCacheTime() {
+        return 720000;
+    }
+
+    @Nonnull
+    @Override
+    public Component getVersionMessage(@Nonnull String serverVersion) {
+        String[] parts = serverVersion.substring("git-Tentacles-".length()).split("[-\\s]");
+        final Component updateMessage = getUpdateStatusMessage("pl3xgaming/Tentacles", GITHUB_BRANCH_NAME, parts[0]);
+        final Component history = getHistory();
+
+        return history != null ? TextComponent.ofChildren(updateMessage, Component.newline(), history) : updateMessage;
+    }
+
+    private static Component getUpdateStatusMessage(@Nonnull String repo, @Nonnull String branch, @Nonnull String versionInfo) {
+        int distance;
+        try {
+            int jenkinsBuild = Integer.parseInt(versionInfo);
+            distance = fetchDistanceFromJenkins(jenkinsBuild);
+        } catch (NumberFormatException ignored) {
+            versionInfo = versionInfo.replace("\"", "");
+            distance = fetchDistanceFromGitHub(repo, branch, versionInfo);
+        }
+
+        switch (distance) {
+            case -1:
+                return Component.text("Error obtaining version information", NamedTextColor.YELLOW);
+            case 0:
+                return Component.text("You are running the latest version", NamedTextColor.GREEN);
+            case -2:
+                return Component.text("Unknown version", NamedTextColor.YELLOW);
+            default:
+                return Component.text("You are " + distance + " version(s) behind", NamedTextColor.YELLOW);
+        }
+    }
+
+    private static int fetchDistanceFromJenkins(int jenkinsBuild) {
+        try {
+            try (BufferedReader reader = Resources.asCharSource(new URL(JENKINS_URL), Charsets.UTF_8).openBufferedStream()) {
+                return Integer.decode(reader.readLine()) - jenkinsBuild;
+            } catch (NumberFormatException ex) {
+                ex.printStackTrace();
+                return -2;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    // Contributed by Techcable <Techcable@outlook.com> in GH-65
+    private static int fetchDistanceFromGitHub(@Nonnull String repo, @Nonnull String branch, @Nonnull String hash) {
+        try {
+            HttpURLConnection connection = (HttpURLConnection) new URL("https://api.github.com/repos/" + repo + "/compare/" + branch + "..." + hash).openConnection();
+            connection.connect();
+            if (connection.getResponseCode() == HttpURLConnection.HTTP_NOT_FOUND) return -2; // Unknown commit
+            try (BufferedReader reader = new BufferedReader(new InputStreamReader(connection.getInputStream(), Charsets.UTF_8))) {
+                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
+                String status = obj.get("status").getAsString();
+                switch (status) {
+                    case "identical":
+                        return 0;
+                    case "behind":
+                        return obj.get("behind_by").getAsInt();
+                    default:
+                        return -1;
+                }
+            } catch (JsonSyntaxException | NumberFormatException e) {
+                e.printStackTrace();
+                return -1;
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+            return -1;
+        }
+    }
+
+    @Nullable
+    private Component getHistory() {
+        final VersionHistoryManager.VersionData data = VersionHistoryManager.INSTANCE.getVersionData();
+        if (data == null) {
+            return null;
+        }
+
+        final String oldVersion = data.getOldVersion();
+        if (oldVersion == null) {
+            return null;
+        }
+
+        return Component.text("Previous version: " + oldVersion, NamedTextColor.GRAY, TextDecoration.ITALIC);
+    }
+}
diff --git a/src/main/java/net/pl3x/tentacles/TentaclesWorldConfig.java b/src/main/java/net/pl3x/tentacles/TentaclesWorldConfig.java
new file mode 100644
index 0000000000000000000000000000000000000000..4c76934d1a1e2a54c9d4fbedbd37ec842e02171f
--- /dev/null
+++ b/src/main/java/net/pl3x/tentacles/TentaclesWorldConfig.java
@@ -0,0 +1,69 @@
+package net.pl3x.tentacles;
+
+import org.apache.commons.lang3.BooleanUtils;
+import org.bukkit.configuration.ConfigurationSection;
+
+import java.util.*;
+import java.util.function.Predicate;
+
+import static net.pl3x.tentacles.TentaclesConfig.log;
+
+public class TentaclesWorldConfig {
+
+    private final String worldName;
+
+    public TentaclesWorldConfig(String worldName) {
+        this.worldName = worldName;
+        init();
+    }
+
+    public void init() {
+        log("-------- World Settings For [" + worldName + "] --------");
+        TentaclesConfig.readConfig(TentaclesWorldConfig.class, this);
+    }
+
+    private void set(String path, Object val) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, val);
+        TentaclesConfig.config.set("world-settings.default." + path, val);
+        if (TentaclesConfig.config.get("world-settings." + worldName + "." + path) != null) {
+            TentaclesConfig.config.addDefault("world-settings." + worldName + "." + path, val);
+            TentaclesConfig.config.set("world-settings." + worldName + "." + path, val);
+        }
+    }
+
+    private ConfigurationSection getConfigurationSection(String path) {
+        ConfigurationSection section = TentaclesConfig.config.getConfigurationSection("world-settings." + worldName + "." + path);
+        return section != null ? section : TentaclesConfig.config.getConfigurationSection("world-settings.default." + path);
+    }
+
+    private boolean getBoolean(String path, boolean def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getBoolean("world-settings." + worldName + "." + path, TentaclesConfig.config.getBoolean("world-settings.default." + path));
+    }
+
+    private boolean getBoolean(String path, Predicate<Boolean> predicate) {
+        String val = getString(path, "default").toLowerCase();
+        Boolean bool = BooleanUtils.toBooleanObject(val, "true", "false", "default");
+        return predicate.test(bool);
+    }
+
+    private double getDouble(String path, double def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getDouble("world-settings." + worldName + "." + path, TentaclesConfig.config.getDouble("world-settings.default." + path));
+    }
+
+    private int getInt(String path, int def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getInt("world-settings." + worldName + "." + path, TentaclesConfig.config.getInt("world-settings.default." + path));
+    }
+
+    private <T> List<?> getList(String path, T def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getList("world-settings." + worldName + "." + path, TentaclesConfig.config.getList("world-settings.default." + path));
+    }
+
+    private String getString(String path, String def) {
+        TentaclesConfig.config.addDefault("world-settings.default." + path, def);
+        return TentaclesConfig.config.getString("world-settings." + worldName + "." + path, TentaclesConfig.config.getString("world-settings.default." + path));
+    }
+}
diff --git a/src/main/java/net/pl3x/tentacles/command/TentaclesCommand.java b/src/main/java/net/pl3x/tentacles/command/TentaclesCommand.java
new file mode 100644
index 0000000000000000000000000000000000000000..6ea7400b2e31f3946dce61251130a5aa27e68906
--- /dev/null
+++ b/src/main/java/net/pl3x/tentacles/command/TentaclesCommand.java
@@ -0,0 +1,66 @@
+package net.pl3x.tentacles.command;
+
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.level.WorldServer;
+import net.pl3x.tentacles.TentaclesConfig;
+import org.bukkit.ChatColor;
+import org.bukkit.Location;
+import org.bukkit.command.Command;
+import org.bukkit.command.CommandSender;
+
+import java.io.File;
+import java.util.Collections;
+import java.util.List;
+import java.util.stream.Collectors;
+import java.util.stream.Stream;
+
+public class TentaclesCommand extends Command {
+    public TentaclesCommand(String name) {
+        super(name);
+        this.description = "Tentacles related commands";
+        this.usageMessage = "/tentacles [reload | version]";
+        this.setPermission("bukkit.command.tentacles");
+    }
+
+    @Override
+    public List<String> tabComplete(CommandSender sender, String alias, String[] args, Location location) throws IllegalArgumentException {
+        if (args.length == 1) {
+            return Stream.of("reload", "version")
+                    .filter(arg -> arg.startsWith(args[0].toLowerCase()))
+                    .collect(Collectors.toList());
+        }
+        return Collections.emptyList();
+    }
+
+    @Override
+    public boolean execute(CommandSender sender, String commandLabel, String[] args) {
+        if (!testPermission(sender)) return true;
+
+        if (args.length != 1) {
+            sender.sendMessage(ChatColor.RED + "Usage: " + usageMessage);
+            return false;
+        }
+
+        if (args[0].equalsIgnoreCase("reload")) {
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "Please note that this command is not supported and may cause issues.");
+            Command.broadcastCommandMessage(sender, ChatColor.RED + "If you encounter any issues please use the /stop command to restart your server.");
+
+            MinecraftServer console = MinecraftServer.getServer();
+            TentaclesConfig.init((File) console.options.valueOf("tentacles-settings"));
+            for (WorldServer world : console.getWorlds()) {
+                world.tentaclesConfig.init();
+                world.resetBreedingCooldowns();
+            }
+            console.server.reloadCount++;
+
+            Command.broadcastCommandMessage(sender, ChatColor.GREEN + "Tentacles config reload complete.");
+        } else if (args[0].equalsIgnoreCase("version")) {
+            Command verCmd = org.bukkit.Bukkit.getServer().getCommandMap().getCommand("version");
+            if (verCmd != null) {
+                return verCmd.execute(sender, commandLabel, new String[0]);
+            }
+        }
+
+        return true;
+    }
+}
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index f3db659d0794b2cbdc35800aac4d314eae9576eb..4c42564d5db26473802ad1668765ced16272bb54 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -882,6 +882,7 @@ public final class CraftServer implements Server {
         com.destroystokyo.paper.PaperConfig.init((File) console.options.valueOf("paper-settings")); // Paper
         com.tuinity.tuinity.config.TuinityConfig.init((File) console.options.valueOf("tuinity-settings")); // Tuinity - Server Config
         net.pl3x.purpur.PurpurConfig.init((File) console.options.valueOf("purpur-settings")); // Purpur
+        net.pl3x.tentacles.TentaclesConfig.init((File) console.options.valueOf("tentacles-settings")); // Tentacles
         for (WorldServer world : console.getWorlds()) {
             world.worldDataServer.setDifficulty(config.difficulty);
             world.setSpawnFlags(config.spawnMonsters, config.spawnAnimals);
@@ -918,6 +919,7 @@ public final class CraftServer implements Server {
             world.paperConfig.init(); // Paper
             world.tuinityConfig.init(); // Tuinity - Server Config
             world.purpurConfig.init(); // Purpur
+            world.tentaclesConfig.init(); // Tentacles
         }
 
         Plugin[] pluginClone = pluginManager.getPlugins().clone(); // Paper
@@ -937,6 +939,7 @@ public final class CraftServer implements Server {
         org.spigotmc.SpigotConfig.registerCommands(); // Spigot
         com.destroystokyo.paper.PaperConfig.registerCommands(); // Paper
         net.pl3x.purpur.PurpurConfig.registerCommands(); // Purpur
+        net.pl3x.tentacles.TentaclesConfig.registerCommands(); // Tentacles
         overrideAllCommandBlockCommands = commandsConfiguration.getStringList("command-block-overrides").contains("*");
         ignoreVanillaPermissions = commandsConfiguration.getBoolean("ignore-vanilla-permissions");
 
@@ -2400,6 +2403,13 @@ public final class CraftServer implements Server {
         }
         // Purpur end
 
+        // Tentacles start
+        @Override
+        public YamlConfiguration getTentaclesConfig() {
+            return net.pl3x.tentacles.TentaclesConfig.config;
+        }
+        // Tentacles end
+
         @Override
         public void restart() {
             org.spigotmc.RestartCommand.restart();
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index 51cdc7e87413302a73416a5da724d873efb29657..10e7914563ef316a737c3b4bf369fa4487f910c8 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -162,6 +162,14 @@ public class Main {
                         .describedAs("Yml file");
                 // Purpur end
 
+                // Tentacles Start
+                acceptsAll(asList("tentacles", "tentacles-settings"), "File for tentacles settings")
+                        .withRequiredArg()
+                        .ofType(File.class)
+                        .defaultsTo(new File("tentacles.yml"))
+                        .describedAs("Yml file");
+                // Tentacles end
+
                 // Paper start
                 acceptsAll(asList("server-name"), "Name of the server")
                         .withRequiredArg()
diff --git a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
index bfe4f7ed53620510b52d4f01c5ea2a3f726942d8..d10c2c935d0b35b0402cc68c0af0cbf8b52e4ce6 100644
--- a/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
+++ b/src/main/java/org/bukkit/craftbukkit/util/CraftMagicNumbers.java
@@ -397,7 +397,7 @@ public final class CraftMagicNumbers implements UnsafeValues {
 
     @Override
     public com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new net.pl3x.purpur.PurpurVersionFetcher();
+        return new net.pl3x.tentacles.TentaclesVersionFetcher();
     }
 
     @Override
